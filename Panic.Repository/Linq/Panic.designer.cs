#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Panic.Repository.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Panic : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHardware(Hardware instance);
    partial void UpdateHardware(Hardware instance);
    partial void DeleteHardware(Hardware instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    partial void InsertSite(Site instance);
    partial void UpdateSite(Site instance);
    partial void DeleteSite(Site instance);
    #endregion
		
		public Panic(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Panic(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Panic(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Panic(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hardware> Hardware
		{
			get
			{
				return this.GetTable<Hardware>();
			}
		}
		
		public System.Data.Linq.Table<Link> Link
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
		
		public System.Data.Linq.Table<Site> Site
		{
			get
			{
				return this.GetTable<Site>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Hardware : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HardwareID;
		
		private string _Description;
		
		private string _Make;
		
		private string _ModelNumber;
		
		private System.Nullable<double> _TXCapacity;
		
		private System.Nullable<double> _RXCapacity;
		
		private System.Nullable<bool> _Enabled;
		
		private string _Notes;
		
		private EntitySet<Link> _Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHardwareIDChanging(int value);
    partial void OnHardwareIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMakeChanging(string value);
    partial void OnMakeChanged();
    partial void OnModelNumberChanging(string value);
    partial void OnModelNumberChanged();
    partial void OnTXCapacityChanging(System.Nullable<double> value);
    partial void OnTXCapacityChanged();
    partial void OnRXCapacityChanging(System.Nullable<double> value);
    partial void OnRXCapacityChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Hardware()
		{
			this._Link = new EntitySet<Link>(new Action<Link>(this.attach_Link), new Action<Link>(this.detach_Link));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HardwareID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HardwareID
		{
			get
			{
				return this._HardwareID;
			}
			set
			{
				if ((this._HardwareID != value))
				{
					this.OnHardwareIDChanging(value);
					this.SendPropertyChanging();
					this._HardwareID = value;
					this.SendPropertyChanged("HardwareID");
					this.OnHardwareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="NVarChar(100)")]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this.OnMakeChanging(value);
					this.SendPropertyChanging();
					this._Make = value;
					this.SendPropertyChanged("Make");
					this.OnMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelNumber", DbType="NVarChar(100)")]
		public string ModelNumber
		{
			get
			{
				return this._ModelNumber;
			}
			set
			{
				if ((this._ModelNumber != value))
				{
					this.OnModelNumberChanging(value);
					this.SendPropertyChanging();
					this._ModelNumber = value;
					this.SendPropertyChanged("ModelNumber");
					this.OnModelNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXCapacity", DbType="Float")]
		public System.Nullable<double> TXCapacity
		{
			get
			{
				return this._TXCapacity;
			}
			set
			{
				if ((this._TXCapacity != value))
				{
					this.OnTXCapacityChanging(value);
					this.SendPropertyChanging();
					this._TXCapacity = value;
					this.SendPropertyChanged("TXCapacity");
					this.OnTXCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RXCapacity", DbType="Float")]
		public System.Nullable<double> RXCapacity
		{
			get
			{
				return this._RXCapacity;
			}
			set
			{
				if ((this._RXCapacity != value))
				{
					this.OnRXCapacityChanging(value);
					this.SendPropertyChanging();
					this._RXCapacity = value;
					this.SendPropertyChanged("RXCapacity");
					this.OnRXCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(100)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hardware_Link", Storage="_Link", ThisKey="HardwareID", OtherKey="HardwareID")]
		public EntitySet<Link> Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				this._Link.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Link(Link entity)
		{
			this.SendPropertyChanging();
			entity.Hardware = this;
		}
		
		private void detach_Link(Link entity)
		{
			this.SendPropertyChanging();
			entity.Hardware = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LinkID;
		
		private int _FromSiteID;
		
		private int _ToSiteID;
		
		private int _HardwareID;
		
		private System.Nullable<double> _TXOverride;
		
		private System.Nullable<double> _RXOverride;
		
		private System.Nullable<bool> _Enabled;
		
		private string _Notes;
		
		private EntityRef<Hardware> _Hardware;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    partial void OnFromSiteIDChanging(int value);
    partial void OnFromSiteIDChanged();
    partial void OnToSiteIDChanging(int value);
    partial void OnToSiteIDChanged();
    partial void OnHardwareIDChanging(int value);
    partial void OnHardwareIDChanged();
    partial void OnTXOverrideChanging(System.Nullable<double> value);
    partial void OnTXOverrideChanged();
    partial void OnRXOverrideChanging(System.Nullable<double> value);
    partial void OnRXOverrideChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Link()
		{
			this._Hardware = default(EntityRef<Hardware>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromSiteID", DbType="Int")]
		public int FromSiteID
		{
			get
			{
				return this._FromSiteID;
			}
			set
			{
				if ((this._FromSiteID != value))
				{
					this.OnFromSiteIDChanging(value);
					this.SendPropertyChanging();
					this._FromSiteID = value;
					this.SendPropertyChanged("FromSiteID");
					this.OnFromSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToSiteID", DbType="Int")]
		public int ToSiteID
		{
			get
			{
				return this._ToSiteID;
			}
			set
			{
				if ((this._ToSiteID != value))
				{
					this.OnToSiteIDChanging(value);
					this.SendPropertyChanging();
					this._ToSiteID = value;
					this.SendPropertyChanged("ToSiteID");
					this.OnToSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HardwareID", DbType="Int")]
		public int HardwareID
		{
			get
			{
				return this._HardwareID;
			}
			set
			{
				if ((this._HardwareID != value))
				{
					if (this._Hardware.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHardwareIDChanging(value);
					this.SendPropertyChanging();
					this._HardwareID = value;
					this.SendPropertyChanged("HardwareID");
					this.OnHardwareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXOverride", DbType="Float")]
		public System.Nullable<double> TXOverride
		{
			get
			{
				return this._TXOverride;
			}
			set
			{
				if ((this._TXOverride != value))
				{
					this.OnTXOverrideChanging(value);
					this.SendPropertyChanging();
					this._TXOverride = value;
					this.SendPropertyChanged("TXOverride");
					this.OnTXOverrideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RXOverride", DbType="Float")]
		public System.Nullable<double> RXOverride
		{
			get
			{
				return this._RXOverride;
			}
			set
			{
				if ((this._RXOverride != value))
				{
					this.OnRXOverrideChanging(value);
					this.SendPropertyChanging();
					this._RXOverride = value;
					this.SendPropertyChanged("RXOverride");
					this.OnRXOverrideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(100)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hardware_Link", Storage="_Hardware", ThisKey="HardwareID", OtherKey="HardwareID", IsForeignKey=true)]
		public Hardware Hardware
		{
			get
			{
				return this._Hardware.Entity;
			}
			set
			{
				Hardware previousValue = this._Hardware.Entity;
				if (((previousValue != value) 
							|| (this._Hardware.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hardware.Entity = null;
						previousValue.Link.Remove(this);
					}
					this._Hardware.Entity = value;
					if ((value != null))
					{
						value.Link.Add(this);
						this._HardwareID = value.HardwareID;
					}
					else
					{
						this._HardwareID = default(int);
					}
					this.SendPropertyChanged("Hardware");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Site : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteID;
		
		private string _SiteName;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _LocalTX;
		
		private System.Nullable<double> _LocalRX;
		
		private System.Nullable<bool> _Enabled;
		
		private string _Notes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLocalTXChanging(System.Nullable<double> value);
    partial void OnLocalTXChanged();
    partial void OnLocalRXChanging(System.Nullable<double> value);
    partial void OnLocalRXChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Site()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="NVarChar(100)")]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalTX", DbType="Float")]
		public System.Nullable<double> LocalTX
		{
			get
			{
				return this._LocalTX;
			}
			set
			{
				if ((this._LocalTX != value))
				{
					this.OnLocalTXChanging(value);
					this.SendPropertyChanging();
					this._LocalTX = value;
					this.SendPropertyChanged("LocalTX");
					this.OnLocalTXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalRX", DbType="Float")]
		public System.Nullable<double> LocalRX
		{
			get
			{
				return this._LocalRX;
			}
			set
			{
				if ((this._LocalRX != value))
				{
					this.OnLocalRXChanging(value);
					this.SendPropertyChanging();
					this._LocalRX = value;
					this.SendPropertyChanged("LocalRX");
					this.OnLocalRXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(100)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
